<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>Advanced Construct</title>
    <link href="https://advancedconstruct.net/feed.xml" rel="self" />
    <link href="https://advancedconstruct.net" />
    <updated>2025-10-17T13:13:13+02:00</updated>
    <author>
        <name>Fodi</name>
    </author>
    <id>https://advancedconstruct.net</id>

    <entry>
        <title>Links for game developers</title>
        <author>
            <name>Fodi</name>
        </author>
        <link href="https://advancedconstruct.net/game-development-resources/"/>
        <id>https://advancedconstruct.net/game-development-resources/</id>
        <media:content url="https://advancedconstruct.net/media/posts/22/gamedev-links.png" medium="image" />
            <category term="Links"/>

        <updated>2025-10-16T21:57:54+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://advancedconstruct.net/media/posts/22/gamedev-links.png" alt="" />
                    <p>A collection of links for practising and future game developers. Engines and art software, learning resources, assets, project management tools, services, et cetera.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://advancedconstruct.net/media/posts/22/gamedev-links.png" class="type:primaryImage" alt="" /></p>
                <p>A collection of links for practising and future game developers. Engines and art software, learning resources, assets, project management tools, services, et cetera.</p>

<div class="post__toc">
<h3>Table of Contents</h3>
<ul>
<li><a href="#j-t-kmotorok">Game engines</a>
<ul>
<li><a href="#kezd-kre-optimaliz-lt-cuccok">Recommended for beginners</a></li>
<li><a href="#a-nagy-nevek">The big three</a></li>
<li><a href="#m-g-n-h-ny-aj-nl-s">A few more recommendations</a></li>
</ul>
</li>
<li><a href="#mcetoc_1imqelhma227">Assets (2D / 3D graphics, sounds, music)</a></li>
<li><a href="#mcetoc_1ilgrsioa1k">Project management &amp; collaboration</a></li>
<li><a href="#mcetoc_1imqelhma222">Learning resources</a></li>
</ul>
</div>
<h2 id="j-t-kmotorok">Game engines</h2>
<h3 id="kezd-kre-optimaliz-lt-cuccok">Recommended for beginners</h3>
<ul>
<li><a href="https://www.construct.net">Construct 3</a>: a freemium 2D engine with some 3D features, runs in the browser (and works offline too). It has a no-code event system, or you can develop in JavaScript or TypeScript. The free version is quite limited, but it's good for getting a general feel of the engine. The full version requires a subscription.</li>
<li><a href="https://gdevelop.io">GDevelop</a>: A free 2D / limited 3D engine that is fairly similar to Construct. It has some optional paid features.</li>
<li><a href="https://gamemaker.io">GameMaker</a>: this 2D engine has been along for a long time and it's free for non-commercial use. For commercial projects, you need to buy a very fairly priced license (one-time purchase).</li>
<li><a href="https://microstudio.dev">microStudio</a>: Open source 2D engine, has a browser based and downloadable version too. Supports many programming languages, including its own Lua-like microScript language, as well as Lua, Python, Javascript, and Typescript.</li>
<li><a href="https://www.gbstudio.dev">GB Studio</a>: open source development environment for making GameBoy or GameBoy Color games, that can run on real hardware, emulators or in the browser. It has a block based no-code programming interface.</li>
<li><a href="https://ctjs.rocks">Ct.js</a>: open source 2D engine and development environment. Has a block based no-code interface called Catnip, or you can use JavaScript to code your game.</li>
<li><a href="https://twinery.org">Twine</a>: open source engine for making interactive fiction games. Runs in the browser, requires no coding, but it can be extended with CSS and JavaScript.</li>
<li><a href="https://bitsy.org">Bitsy</a>: open source 2D no-code engine for making retro games.</li>
<li><a href="https://ctjs.itch.io/whimsy" target="_blank" rel="noopener noreferrer">Whimsy</a>: free 2D no-code engine inspired by Bitsy. It has browser based and downloadable versions as well.</li>
<li><a href="https://rpginabox.com">RPG in a Box</a>: very fairly priced 2D/3D engine and editor primarily for making RPG games. It has a no-code interface with optional scripting support with its own Bauxite language.</li>
<li><a href="https://www.rpgmakerweb.com/">RPG Maker</a> MZ / MV / VX / XP / etc: a family of 2D no-code engines for making RPGs. Requires a one time purchase, but most versions have 30 day free trials available.</li>
<li><a href="https://store.steampowered.com/app/1066860/RPG_Paper_Maker/" target="_blank" rel="noopener noreferrer">RPG Paper Maker</a>: open source 2.5D engine inspired by RPG Maker. Its free for non-commercial use, making commercial games requires a fairly priced lifetime license.</li>
<li><a href="https://www.puzzlescript.net/index.html">PuzzleScript</a>: open source brower based 2D engine and scripting language for primarily for making retro puzzle / action games.</li>
</ul>
<h3 id="a-nagy-nevek">The big three</h3>
<ul>
<li><a href="https://godotengine.org">Godot</a>: popular open source 2D/3D engine. Can be programmed via its own Python-like GDScript language, or C#.</li>
<li><a href="https://unity.com">Unity</a>: popular commercial 2D/3D engine, with a massive community and array of learning resources. Can be programmed via a node based no-code interface, or C#. It has a free version and multiple subscription based plans with advanced features.</li>
<li><a href="https://www.unrealengine.com">Unreal Engine</a>: free engine primarily for making 3D games. Can be programmed via Blueprint, a node based no-code interface, or C++.</li>
</ul>
<h3 id="m-g-n-h-ny-aj-nl-s">A few more recommendations</h3>
<ul>
<li><a href="https://love2d.org">LÖVE</a>: open source 2D engine based on the Lua language.</li>
<li><a href="https://www.lexaloffle.com/pico-8.php">PICO-8</a>: commercial (but very fairly priced) Lua based 2D engine and "fantasy console" for making retro games.</li>
<li><a href="https://tic80.com">TIC-80</a>: open source engine and "fantasy console", similar to PICO-8.</li>
<li><a href="https://morgan3d.github.io/quadplay/">quadplay✜</a>: open source engine and "fantasy console", which can be programmed using its own language called PyxlScript.</li>
</ul>
<h2 id="mcetoc_1imqelhma227">Assets (2D / 3D graphics, sounds, music)</h2>
<ul>
<li><a href="https://itch.io/game-assets">Itch.io</a>: an asset marketplace with tons of free and commercial 2D/3D art,  sound effects and music.</li>
<li><a href="https://opengameart.org/">OpenGameArt</a>: free and mostly permissively licensed asset repository.</li>
<li><a href="https://kenney.nl/">Kenney</a>, aka. <a href="https://www.assetjesus.com/">Asset Jesus</a>: an incredible collection of hand made CC0 licensed 2D and 3D assets, music, sound effects.</li>
<li><a href="https://quaternius.com/">Quaternius</a>: CC0 licensed low poly 3D models.</li>
<li><a href="https://poly.pizza/">PolyPizza</a>: free and mostly permissively licensed 3D low poly asset repository.</li>
<li><a href="https://www.sharetextures.com/">Share Textures</a>: a collection of CC0 licensed textures.</li>
<li><a href="https://polyhaven.com/">Poly Haven</a> and <a href="https://ambientcg.com/">ambientCG</a>: a collection of CC0 licensed 3D models and textures.</li>
<li><a href="https://99sounds.org/sounds/">99Sounds</a>: a collection of free to use sound effects.</li>
<li><a href="https://lospec.com/">Lospec</a>: a repository of pixel art palettes and tutorials.</li>
<li><a href="https://incompetech.com/music/royalty-free/music.html">Incompetech</a>: CC-BY licensed music by Kevin MacLeod.</li>
<li><a href="https://freesound.org/">Freesound</a>: free and mostly permissively licensed sound effect repository. Downloading requires a free account.</li>
<li><a href="https://www.fontspace.com/">FontSpace</a> and <a href="https://fonts.google.com/">Google Fonts</a>: free and mostly permissively licensed fonts.</li>
<li><a href="https://gwfh.mranftl.com/fonts">Google Webfonts Helper</a>: alternative Google Fonts frontend for downloading fonts in specific formats (woff, woff2, ttf, otf, eot, svg).</li>
<li><a href="https://pixabay.com/" target="_blank" rel="noopener noreferrer">Pixabay</a>: a repository of free nad permissively licensed 2D, 3D, vector graphics, sound and music assets.</li>
</ul>
<h2 id="mcetoc_1ilgrsioa1k">Project management &amp; collaboration</h2>
<ul>
<li><a href="https://trello.com/">Trello</a>: kanban-style freemium project management tool.</li>
<li><a href="https://miro.com/">Miro</a>: "infinite board" type freemium collaboration tool.</li>
<li><a href="https://www.notion.com">Notion</a>: freemium tool for collaboration.</li>
<li><a href="https://obsidian.md/">Obsidian</a>, <a href="https://logseq.com/">Logseq</a>: popular open source apps for knowledge bases, planning, note taking, documentation, et cetera.</li>
</ul>
<h2 id="mcetoc_1imqelhma222">Learning resources</h2>
<ul>
<li><a href="https://www.redblobgames.com/">Red Blob Games</a>: free interactive visual explanations of math, algorithms and game mechanics.</li>
<li><a href="https://www.gameuidatabase.com/">Game UI Database</a>: game UI reference for designers.</li>
<li><a href="https://www.bscotch.net/podcast">Coffee with Butterscotch</a>: a gamedev comedy podcast by Butterscotch Shenanigans, an indie game studio, equally hilarious and insightful.</li>
<li><a href="https://saint11.art/blog/pixel-art-tutorials/">Pixel Art Tutorials</a>: incredible animated pixel art tutorials by Pedro Medeiros (Saint11).</li>
<li><a href="https://www.omnicalculator.com/math">Omnicalculator</a>: learning resource and interactive calculators.</li>
<li><a href="https://deepnight.net/games/game-feel/">Game Feel Demo</a> by Deepnight Games: an interactive demonstration of a lot of ways to add "juice" to a game.</li>
</ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Links for Construct developers</title>
        <author>
            <name>Fodi</name>
        </author>
        <link href="https://advancedconstruct.net/construct-resources/"/>
        <id>https://advancedconstruct.net/construct-resources/</id>
        <media:content url="https://advancedconstruct.net/media/posts/21/construct-links.png" medium="image" />
            <category term="Links"/>

        <updated>2025-10-12T22:38:06+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://advancedconstruct.net/media/posts/21/construct-links.png" alt="" />
                    <p>If you're a Construct developer, check out these neat resources made by the community. Tutorials, tips, optimisation, 3rd party tools, et cetera.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://advancedconstruct.net/media/posts/21/construct-links.png" class="type:primaryImage" alt="" /></p>
                <p>If you're a Construct developer, check out these neat resources made by the community. Tutorials, tips, optimisation, 3rd party tools, et cetera.</p>

<h2>Learning resources</h2>
<ul>
<li><a href="https://thinkery.co.uk/u/james/construct3">Construct 3 tips, best practices &amp; notes by James</a></li>
<li><a href="https://fed-4.gitbook.io/c3-cheat-sheets/">Construct 3 cheat sheets by Federico Calchera</a></li>
<li><a href="https://www.construct.net/en/tutorials/performance-tips-community-3247">Performance tips by Federico Calchera</a></li>
<li><a href="https://howtoconstructdemos.com/">HowToConstruct.com templates &amp; demos</a></li>
<li><a href="https://www.construct.net/en/users/198994/skymen/tutorials">Construct 3 tutorials by Skymen</a></li>
<li><a href="https://www.youtube.com/@XanderwoodGameDev">Construct 3 video tutorials by Xanderwood</a></li>
<li><a href="https://www.youtube.com/@gamedesignwithreilly">GameDesign With Reilly (video tutiorials)</a></li>
</ul>
<h2>Tools</h2>
<ul>
<li><a href="https://github.com/skymen/construct-crawler">Construct Crawler by Skymen</a>: cross platform app for manipulating Construct projects</li>
<li><a href="https://pipelab.app/">Pipelab by Armaldio</a>: freemium cross platform app for automating deployment of Construct projects</li>
<li><a href="https://github.com/fodi/c3p2git/">c3p2git by Fodi</a>: Windows CLI utility for turning c3p project files into Git commits</li>
<li>Sprite font generators
<ul>
<li><a href="https://stmn.itch.io/font2bitmap">Font To Bitmap by stmn</a> (browser based)</li>
<li><a href="https://spritetype.netlify.app/">SpriteType by Dokse</a> (browser based)</li>
<li><a href="https://www.construct.net/en/forum/game-development/tools-and-resources-27/sprite-font-generator-v3-64038">Sprite Font Generator by blackhornet</a> (Windows app)<a href="https://easings.net/"></a></li>
</ul>
</li>
<li><a href="https://fodi.github.io/construct-3-projects/ConstructColorConverter/">Construct Color Converter by Fodi</a>: batch convert hexadecimal RGB palettes into Construct 3 color values &amp; global constant declarations</li>
</ul>
<h2>Services</h2>
<ul>
<li>Free(mium) webhosting services for HTML5 builds
<ul>
<li><a href="https://docs.github.com/en/pages">GitHub Pages</a></li>
<li><a href="https://docs.gitlab.com/user/project/pages/">GitLab Pages</a></li>
<li><a href="https://pages.cloudflare.com/">Cloudflare Pages</a></li>
<li><a href="https://vercel.com/">Vercel</a></li>
</ul>
</li>
<li>Game porting services
<ul>
<li><a href="https://mp2.dk/">MP2 Games</a></li>
<li><a href="https://ratalaikagames.com/">Ratalaika Games</a></li>
<li><a href="https://www.seaven-studio.com/">Seaven Studio</a></li>
</ul>
</li>
</ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Sheet management</title>
        <author>
            <name>Fodi</name>
        </author>
        <link href="https://advancedconstruct.net/sheet-management/"/>
        <id>https://advancedconstruct.net/sheet-management/</id>
        <media:content url="https://advancedconstruct.net/media/posts/20/event-sheets.png" medium="image" />
            <category term="Organization"/>

        <updated>2025-09-16T19:06:36+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://advancedconstruct.net/media/posts/20/event-sheets.png" alt="Illustration: a chicken sitting on a bunch of books" />
                    <p class="msg msg--highlight ">An article on function sheets, action sheets, value sheets, top level sheets... oh, and event sheets of course. And emojis.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://advancedconstruct.net/media/posts/20/event-sheets.png" class="type:primaryImage" alt="Illustration: a chicken sitting on a bunch of books" /></p>
                <p class="msg msg--highlight ">An article on function sheets, action sheets, value sheets, top level sheets... oh, and event sheets of course. And emojis.</p>

<p>What is an event sheet? A sheet that contains events, right? But what if there is a sheet that only has global variables or constants? Or one containing functions exclusively? Or custom actions, for that matter.</p>
<p>In the last few years I've been using a system that involves having top level event sheets and four subfolders, one for sheets with custom actions, one for sheets with functions, one for sheets with global values (variables and constants) and one for actual event sheets. The subfolders are named <strong>Actions</strong>, <strong>Events</strong>, <strong>Functions </strong>and <strong>Values</strong>, all sheets in the subfolders are prefixed with the letters "a", "e", "f" and "v" respectively, so it's easier to navigate the open tabs.</p>
<p>In this article I go through the details of this setup (with some sidenotes here and there). I have a <a href="https://github.com/fodi/construct-3-projects/raw/refs/heads/main/projectfiles/BlankTemplate.c3p">blank project template that you can download</a> with the folders and most commonly used event sheets (most of them are empty, prefixed with an underscore).</p>
<p>A slightly weird thing I also like to do is to add emojis at the end of event sheet names. They act a bit like icons, so when I have a lot of tabs open, it's easier for me to find the one I'm looking for. Emojis also signify the fact that the tab is an event sheet, and not a layout.</p>
<p class="msg msg--info"><strong>Sidenote</strong><br>If you put emojis in the names of Construct 3 event sheets (or other primitives, eg. objects) and save your project as a folder instead of a <code>c3p</code> file, make sure that your file system and apps that handle your project folders are okay with emojis in the file names. For example, Dropbox isn't  - at the time of writing, it refuses to sync files with emojis in their names. Using <code>c3p</code> project files inside a Dropbox folder is a workaround for this issue, since those are really <code>zip</code> files, which handle emoji filenames in them without problems.</p>
<p>Okay, let's dive in!</p>
<h2>Top level sheets</h2>
<p>My rule is to only have sheets on the top level if they are assigned to at least one layout. When I'm prototyping, I usually start dumping everything in a top level event sheet, then organize it later by moving everything to other sheets. I like to go fast and do periodic clean-ups after things are in a working state.</p>
<p>For simpler layouts (eg. the crappy low effort menus that I usually make for jam games and prototypes), I just put all events in a top level sheet, since there aren't too many anyway.</p>
<p>For complex ones (like levels) I create a top level event sheet (eg. <code>Level 🗺️</code>) and only put event sheet includes in it, nothing else. There's no need to include sheets that only contain functions, global variables, constants or custom actions, as those are all globally available by default. <span style="text-decoration: underline;">Actual</span> event sheets do have to be included in top level event sheets in order to run.</p>
<h2>Actions folder</h2>
<p>This folder is for sheets with custom actions only, one sheet per object type (or family). The sheet's names match the object or family name, prefixed with the letter "a" (short for "action") and suffixed with an emoji, eg. <code>aPlayer 🧑</code>, <code>aEnemy 👾</code>, etc.</p>
<p>Common custom actions include <code>spawn</code> (which spawns an instance of its object type or family) and <code>tick</code> (which is called in an every tick event and does various things with the instance). If a game has players and/or enemies with health, I usually have one called <code>changeHealth</code> on the object type which is called when an instance is damaged or healed. This action takes care of changing the health instance variable, doing audio and visual feedback based on the change, checking if health is zero and doing the destruction of the instance, if needed.</p>
<h2>Events folder</h2>
<p>This folder is for <span style="text-decoration: underline;">actual</span> event sheets, only containing events (sometimes enclosed in groups). These sheets have to be included in at least one top level event sheet in order to work (unlike <strong>function</strong>, <strong>action</strong> and <strong>value</strong> sheets). I never put any global variables, constants, custom actions or functions in these sheets.</p>
<p>Sheets in this folder are named according to the kind of conditions (mostly triggers) that are in them. Here are the ones I use most frequently:</p>
<ul>
<li><code>eCollisions 💥</code> for "On collision with another object" events only. I used to put overlap checks in here too, but nowadays I usually do those inside <code>tick</code> custom actions instead (and other non-trigger events too). I find it very handy to have all collision checks in a single sheet.</li>
</ul>
<p class="msg msg--info"><strong>Sidenote<br></strong>When setting up collision checks, I try to set the first object to the one that (probably) has fewer instances in a layout, and the second to the one that (probably) has more. I read somewhere that this has better performance. Also don't forget to set a reasonable collision cell size for your layout, the default is usually way too big.</p>
<ul>
<li><code>eCreated ✨</code> for "On created" events only, and only for object types / families that have instances on a layout at start, not ones that are dynamically spawned during runtime. In the former case, I usually make an <code>init</code> custom action which initializes the object and call it from the "On created" event.<br>If an object type only spawns dynamically during runtime, I usually have a <code>spawn</code> custom action for it, which takes care of the spawning and any initialization as well. I keep at least one instance of dynamically spawned objects is in a "repository layout" - nowadays I name it <code>@ Templates</code>. Most official examples have one called <code>ObjectRespository</code>.</li>
<li><code>eTimers ⏰</code> for "On timer" events only.</li>
</ul>
<p class="msg msg--info"><strong>Sidenote<br></strong>Don't forget to add a "for each" to "On timer" events if there's a chance that multiple instances of the same object might finish their timer in the same tick. If that happens and there's no "for each", only one instance will be picked by the "On timer" trigger, which is a bit of a footgun, if you ask me (by the way I'm also planning an article on Construct 3 footguns). That said, there's a <a href="each" target="_blank" rel="noopener noreferrer">warning in the official docs</a> about this behaviour.</p>
<ul>
<li><code>eTweens 🌓</code> for the Tween behaviour's "On finished" events only. As far as I know, there's no need to "for each" those like Timers.</li>
<li><code>eInput_Global 🔘</code> and <code>eInput_Level 🕹️</code> for anything that is input related: keyboard, mouse, touch and game pad events including triggers and non-triggers (eg. "is down"). <code>eInput_Global 🔘</code> contains input events which have to run on multiple or all layouts (eg. toggling full screen or restarting the whole game, etc). This also means that it's included in multiple top level event sheets. <code>eInput_Level 🕹️</code> only has input handling related to the level and I usually have events split into multiple groups: one for player movement (or one for each player in a local multiplayer game), one for UI, one for developer cheats and so on.</li>
<li><code>eSystem ⏱️</code> exclusively for events of the "System" category. Usually it contains a single "On start of layout" event and a single "Every tick" event with multiple function and custom action calls. Any other triggers from the "System" category also go in this sheet, eg. "On signal", "On canvas snapshot, "On save complete", etc.</li>
</ul>
<p>Here are some less frequently used ones:</p>
<ul>
<li><code>eAJAX 📡</code> for trigger events of the AJAX object, like "On completed" and "On error".</li>
<li><code>eAnimations 🎞️</code> for animation related trigger events, like "On finished" and "On frame changed".</li>
<li><code>eMovement 🏃</code> for movement behaviour related triggers, like "On landed" for the Platform behaviour, "On step" for the Bullet behaviour, "On target acquired" for the Turret behaviour, et cetera.</li>
</ul>
<h2>Functions folder</h2>
<p>This is for sheets containing functions only.</p>
<p>There's usually one called <code>fUtilities 🧰</code>, which contains a handful of frequently used math functions which calculate and return values like <code>volumePercentToDb</code> (for converting a 0-100 percent value to decibels for Audio object actions), <code>distance3D</code> (like the system expression <code>distance</code> but for 3D coordinates), <code>expDecay</code> (the function I usually use <a href="https://www.youtube.com/watch?v=LSNQuFEDOyQ" target="_blank" rel="noopener noreferrer">instead of</a> <code>lerp</code>).<br>I frequently have some helper functions like <code>toggleFullscreen</code> which requests or cancels full screen mode and <code>toggleLayer</code> which simultaneously toggles the visibility and interactivity of a given layer.</p>
<p>In almost all projects I have a sheet called <code>fLevel 🎬</code>, which contains "game life cycle" functions like <code>initLevel</code>, <code>endGame</code> and other game-specific functions that do a lot of things with a lot of objects.</p>
<p>In some projects I used to have a sheet called <code>fAudio 🎵</code> for functions like <code>playSFX</code> and <code>playBGM</code> to play sound and music according to the current volume settings, with optional debouncing and random variations for sound effects. Nowadays I create an <code>aAudio 🎵</code> sheet in the Actions folder and put similarly named custom actions on the Audio object.</p>
<p class="msg msg--info"><strong>Sidenote</strong><br><a href="https://github.com/fodi/construct-3-projects/raw/refs/heads/main/projectfiles/BlankTemplate.c3p">My blank project template</a> also includes the <code>fRules 📜</code> sheet, with a very specific set of functions, for loading a default rule set for the game from a JSON file and allowing URL parameter based rule overrides to help with balancing / testing. It's a whole thing, I'll probably write an article about it at one point.</p>
<h2>Values folder</h2>
<p>The <code>Values</code> folder is for sheets containing only global variables or constants. I have a fixed set of 4 sheets in this folder:</p>
<ol>
<li><code>vPrimitives 🍞</code> containing global constants for a handful of "generic" values and characters that I use frequently in expressions:
<ul>
<li><code style="font-weight: var(--font-weight-normal);">NOTHING</code><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> with the numeric value of </span><code style="font-weight: var(--font-weight-normal);">-1</code><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">, which is the next best thing to null (which is not a thing in Construct). Eg. if I have an instance variable for storing object UIDs, I use this to "clear" its value (or to check if it's set or not), since <code>-1</code> not a valid UID. Some system expressions </span><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">also return </span><code style="font-weight: var(--font-weight-normal);">-1</code><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> (eg. <code>find</code> when there are no results), so it comes handy for those too.</span></li>
<li><code>NO</code> and <code>YES</code>: with the numeric values <code>0</code> and <code>1</code> respectively. I almost never use booleans in my projects, instead I use numbers with these values. My main beef with booleans in Construct 3 is that I can't pass a dynamic value to a function or custom action with a boolean parameter. When calling one, I have to use a checkbox to either pass true or false, I cannot pass the result of an expression or a variable. Because of this I refrain from using boolean variables in functions and custom actions, and use the numbers 0 and 1 instead.</li>
<li><code>EMPTY</code>, which is an empty string, the <code>NOTHING</code> of string variables. I use it to clear a string variable or to check if it's empty.</li>
<li><code>COMMA</code>, <code>UNDERSCORE</code>, <code>SPACE</code> and <code>DOT</code>: single character string constants that contain a comma, an underscore, a space and a dot (or full stop, period, etc) respectively. I use <code>DOT</code> when writing JSON object path expressions, the rest are for dealing with comma / underscore / space delimited strings (aka. "cheapskate arrays"), eg. with <code>tokenat</code> and <code>tokencount</code>.</li>
</ul>
</li>
<li><code style="font-weight: var(--font-weight-normal);">vNames 🗃️</code><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> contains global constants that act as "enums" or "macros" (not sure of the right terminology). I have a whole </span><a href="https://advancedconstruct.net/using-global-names/" style="font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">article on "global names"</a><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> that goes into details on what is in this sheet.</span></li>
<li><code style="font-weight: var(--font-weight-normal);">vConfig 💎</code><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> contains global constants prefixed with <code>C_</code>, which are all magic numbers or magic strings that do not need to change during runtime. The contents of this sheet are specific to the project, but here are some real-life examples from our game </span><a href="https://lasermagnet.itch.io/wordpile" target="_blank" rel="noopener noreferrer" style="font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">Wordpile</a><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">:</span>
<ul>
<li><code style="font-weight: var(--font-weight-normal);">C_Tile_TweenOut_Time</code><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">: tween time for fading out a Tile object.</span></li>
<li><code>C_DIR_Layouts</code>: path of the folder that contains level layouts (which are loaded via AJAX).</li>
<li><code>C_UI_Hold_Interval</code>: the amount of time a player needs to hold a button to activate its secondary function.</li>
<li><code>C_Color_Red</code>: a certain red color value (in this case <code>-281479422673919</code>) that I use in a some "set color" actions.</li>
<li><code>C_Player_Count_Max</code>: hard limit of players that can join a local multiplayer match (the game supports 1-4 players).</li>
</ul>
</li>
<li><code style="font-weight: var(--font-weight-normal);">vState ♻️</code><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> only contains global variables (and no constants) that hold internal state of the game. These are camel cased by default, but sometimes I group them with prefixes and use an underscore after a prefix. Some random examples:</span>
<ul>
<li><code>locale</code>: contains 2 character code for the currently selected UI language (eg. "en"), used for configuring the Internationalization plugin after the a language is chosen on the UI.</li>
<li><code style="font-weight: var(--font-weight-normal);">volumePercentBGM</code><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> and </span><code style="font-weight: var(--font-weight-normal);">volumePercentSFX</code><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">: 0-100 values of the background music and sound effects.</span></li>
<li><code style="font-weight: var(--font-weight-normal);">level_seed</code><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">: current seed of the level used for initializing the AdvancedRandom object.</span></li>
<li><code style="font-weight: var(--font-weight-normal);">level_currentPlayerId</code><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">: contains which player's turn is it in a multiplayer game (0 for first player, 1 for second, etc).</span></li>
<li><code style="font-weight: var(--font-weight-normal);">level_penaltyTotal</code><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">: when the level ends, the player gets an amount of penalty points based on how they did and it gets tallied up in this variable.</span></li>
</ul>
</li>
</ol>
<p>That's about it, really. The system hasn't changed much recently, but sometimes I do decide to rename or restructure a few things. I'll try to keep this article updated if that happens.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Downloadable projects</title>
        <author>
            <name>Fodi</name>
        </author>
        <link href="https://advancedconstruct.net/downloadable-projects/"/>
        <id>https://advancedconstruct.net/downloadable-projects/</id>
        <media:content url="https://advancedconstruct.net/media/posts/18/downloadable-projects.png" medium="image" />

        <updated>2025-09-01T21:29:50+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://advancedconstruct.net/media/posts/18/downloadable-projects.png" alt="Illustration: a parachuting filing cabinet drawer full of files" />
                    <p>I have some free template &amp; example projects, all available under the MIT license.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://advancedconstruct.net/media/posts/18/downloadable-projects.png" class="type:primaryImage" alt="Illustration: a parachuting filing cabinet drawer full of files" /></p>
                <p>I have some free template &amp; example projects, all available under the MIT license.</p>

<p>You can find a list of projects and demos here:<br><a href="https://fodi.github.io/construct-3-projects/">https://fodi.github.io/construct-3-projects</a></p>
<p>You can grab the source files from this monorepo:<br><a href="https://github.com/fodi/construct-3-projects">https://github.com/fodi/construct-3-projects</a></p>
<p>I also have some example &amp; experimental projects hosted on Itch.io, you can find them in this collection:<br><a href="https://itch.io/c/6291129/fodis-open-source-projects">https://itch.io/c/6291129/fodis-open-source-projects</a></p>
<p>Have fun!</p>
<p>If you find any of them useful, and would like to <a href="https://buymeacoffee.com/fodi" target="_blank" rel="noopener noreferrer">buy me a coffee</a>, you can :)</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Using &quot;global names&quot;</title>
        <author>
            <name>Fodi</name>
        </author>
        <link href="https://advancedconstruct.net/using-global-names/"/>
        <id>https://advancedconstruct.net/using-global-names/</id>
        <media:content url="https://advancedconstruct.net/media/posts/14/global-names-2.png" medium="image" />
            <category term="Organization"/>

        <updated>2025-08-13T21:56:00+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://advancedconstruct.net/media/posts/14/global-names-2.png" alt="Illustration: a clipboard showing a list of three items each with a roll of string, and a big green checkmark" />
                    <p class="msg msg--highlight ">String literals? Yuck. More typo protection, better autocompletes, enhanced usage lookups? Yes please!</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://advancedconstruct.net/media/posts/14/global-names-2.png" class="type:primaryImage" alt="Illustration: a clipboard showing a list of three items each with a roll of string, and a big green checkmark" /></p>
                <p class="msg msg--highlight ">String literals? Yuck. More typo protection, better autocompletes, enhanced usage lookups? Yes please!</p>

<p>OG Construct developer <a href="https://bsky.app/profile/salmanshh.bsky.social">Salman Shurie</a> referred to the engine's event system as "super intellisense" a couple of times - turns out the phrase was coined by <a href="https://bsky.app/profile/wtfmig.bsky.social">@wtfmig</a>. Nevertheless, I think it's on point.</p>
<p>When you're using the event system (and no JS/TS code), you can't mistype names of variables, constants, behaviours, objects, families or functions, because the editor simply won't let you. You can also rename any of these without worrying about breaking code, Construct automatically updates all references to reflect the name change (again, as long as they are not mentioned in JS/TS code). If you're using the paid version, the editor can also find all usages of variables, constants, objects and family members. It's an amazing tool and I use it countless times during development.</p>
<p>There are some things you can still mistype, since they are not structured as identifiers, but strings. Layer names, animation names, effect names, various tags (for tweens, timers, sounds, et cetera) can be entered as string literals. Construct tries to suggest them, but you can still make a typo and you don't get usage finding. And if you decide to rename a layer, animation, effect or any sort of tag, you'll have to manually search for it and change it manually by hand which is tedious and error prone.</p>
<p>Rather than doing that, you can create global constants (which are identifiers) and use them instead of string literals. This way you get typo protection, usage lookups and renaming things is a lot easier once you resist the urge to use string literals in those cases. Granted, there's an extra step (creating a global constant), but I think it's worth the effort.</p>
<p>In my projects I put all "global name" constants in an event sheet called <code>vNames</code>. Since it only contains variables, it's automatically "included" in all events sheets, so you don't have to worry about importing it. (By the way the same goes for functions and custom actions too; only sheets containing events have to be included to run.)</p>
<p>You can also apply a naming convention on the global "name" constants to signify their "kind", eg:</p>
<ul>
<li><code>LAYER_Main = "Main"</code> (value matches the layer name)</li>
<li><code>TIMER_Invincibility = "Invincibility"</code> (timer tag)</li>
<li><code>TWEEN_FadeIn = "FadeIn"</code> (tween tag)</li>
<li><code>EFFECT_Brightness = "Brightness"</code> (value matches an effect name)</li>
<li><code>ANIM_Idle = "Idle"</code> (value matches an animation name)</li>
</ul>
<p>...or you can even add the names of the related family or object type, so there's no reuse between different types:</p>
<ul>
<li><code>TIMER_Player_Invincibility = "Player_Invincibility"</code></li>
<li><code>TWEEN_Enemy_Opacity_FadeIn = "Enemy_Opacity_FadeIn"</code> (also includes the "type" of tween - in this case, opacity)</li>
<li><code>EFFECT_Item_Brightness = "Brightness"</code></li>
<li><code>ANIM_Enemy_Idle = "Idle"</code></li>
<li><code>ANIM_Player_Idle = "Idle"</code></li>
</ul>
<p>Lately I've been doing the latter which has two additional benefits:</p>
<ul>
<li>Less confusion when finding references, since every name is specific to an object type or a family</li>
<li>Less typing / better autocompletion: eg. I can type ANIM_ to get a list of all animation names, continuing typing the object/family name filters the list even further so it's easy to choose one with the arrow keys</li>
<li>Tidier vNames sheet: alphabetically sorting global names means they are grouped by type and object / family.</li>
</ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Project organization</title>
        <author>
            <name>Fodi</name>
        </author>
        <link href="https://advancedconstruct.net/project-organization/"/>
        <id>https://advancedconstruct.net/project-organization/</id>
        <media:content url="https://advancedconstruct.net/media/posts/17/project-organization.png" medium="image" />
            <category term="Organization"/>

        <updated>2025-08-13T21:20:00+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://advancedconstruct.net/media/posts/17/project-organization.png" alt="Illustration: an octopus holding a bunch of books in its tentacles" />
                    <p>I'd like to cover many things on this topic, so here's a list showing which article's available and what's planned.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://advancedconstruct.net/media/posts/17/project-organization.png" class="type:primaryImage" alt="Illustration: an octopus holding a bunch of books in its tentacles" /></p>
                <p>I'd like to cover many things on this topic, so here's a list showing which article's available and what's planned.</p>

<h2>Available</h2>
<ul>
<li><strong><a href="https://advancedconstruct.net/using-global-names/">Using "global names"</a></strong><br>Construct does not have enums and uses string literals in some places where an enum would be more convenient. Here's a way to get almost all benefits of enums.</li>
<li><strong><a href="https://advancedconstruct.net/sheet-management/">Sheet management</a></strong><br>A system composed of top level or "main" sheets, action sheets, function sheets, value sheets and <span style="text-decoration: underline;">actual</span> event sheets.</li>
</ul>
<h2>Planned</h2>
<ul>
<li><strong>Object &amp; family conventions</strong><br>Naming and grouping, typical hierarchies, instance variable and custom action usage</li>
<li><strong>Global object(s)</strong><br>Also known as the level or game manager object, a singleton, or autoload in Godot-land. I use it to keep state between layouts, run timers and value tweens not related to objects and a few other minor things.</li>
<li><strong>Code reuse and structuring</strong><br>How and when I use functions, custom actions and event groups.</li>
</ul>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Finding things in Construct</title>
        <author>
            <name>Fodi</name>
        </author>
        <link href="https://advancedconstruct.net/finding-things-in-construct/"/>
        <id>https://advancedconstruct.net/finding-things-in-construct/</id>
        <media:content url="https://advancedconstruct.net/media/posts/13/finding-things.png" medium="image" />
            <category term="Productivity"/>

        <updated>2025-08-13T20:38:00+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://advancedconstruct.net/media/posts/13/finding-things.png" alt="Illustration: a cartoonish private inspector character with big eyes holding a magnifying glass" />
                    <p class="msg msg--highlight ">Let's take a look at the tools in Construct that let you find stuff.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://advancedconstruct.net/media/posts/13/finding-things.png" class="type:primaryImage" alt="Illustration: a cartoonish private inspector character with big eyes holding a magnifying glass" /></p>
                <p class="msg msg--highlight ">Let's take a look at the tools in Construct that let you find stuff.</p>

<p>Like in most development environments you can <strong>perform a text search</strong> by pressing <em>Ctrl</em> + <em>F</em>. Construct allows you to specify the scope of your search, toggle case sensitivity and you can even perform a second search to further filter down search results, which is especially handy when you have a lot of them. You can also <strong>remove results</strong> by selecting them and pressing <em>Delete</em> (re-running the search will bring them back).</p>
<p>If you're editing a code block or a text file, <em>Ctrl</em> + <em>F</em> brings up a different toolbar that allows you to <strong>find (and even replace) text</strong>. The toolbar might look familiar if you're a VSCode user, since both are powered by the open source Monaco code editor which replaced the old CodeMirror 5 based one in Construct 3 r432. It also has nifty features like renaming identifiers by pressing <em>F2</em> and a bunch of other which you can find in the Command palette. Just note that the scope is always the current code block or tab.</p>
<p>As your project grows, you might end up scrolling a lot up and down the project bar to <strong>find event sheets, objects, files</strong>, et cetera; luckily there's a search field you can focus by pressing <em>Ctrl</em> + <em>Shift</em> + <em>F</em> and just start typing to find matches.</p>
<p>Since Construct is running in the browser you can still use the generic find tool, which can be especially useful for <strong>highlighting text on your screen</strong>. Press <em>Ctrl</em> + <em>G</em> to bring it up (since <em>Ctrl</em> + <em>F</em> is overridden to use Construct's own find feature).</p>
<p>A super useful feature (unfortunately missing from the free version) is that you can right click any object, family, function, custom action or variable and select "<strong>find all references</strong>". In all cases, Construct will compile a list of each "mention" in the event sheets. If you selected an object instance, object type or family, you'll also see the number of instances per layout. If you use the "Create object (by name)" system action anywhere, object &amp; family reference lists will also include those actions as well just to be on the safe side; you can hide those results by unchecking "Show ambiguous".</p>
<p>If you opt in to use <strong>"global names"</strong> instead of string literals to reference names of animations, layers, effects, various tags and such in your event sheets, you'll also be able to find all mentions of those using the "find all references" feature. Not to mention the added bonus of typo protection and easy renaming. <a href="#non-existing-post-with-id-7">Read more about "global names" here!</a></p>
<p>When making changes to a fairly complex project it's easy to get lost jumping between event sheets (especially if you have about 20 of them open). In such a scenario I like to use the often forgotten <strong>bookmarks feature</strong>. The <strong>Bookmarks bar</strong> is not open by default, but I usually have it open all the time docked in the bottom left corner, just taking a bit of space from the <strong>Properties bar</strong>. When you're in an event, you can press <em>F2</em> to bookmark it, which adds an easy to spot icon next to the event and adds it to the Bookmarks bar, where you can double click it to jump right to it. Just don't forget to remove old bookmarks you no longer need: the easiest way is to right-click the bar and select <strong>Remove All</strong>.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Keyboard mastery</title>
        <author>
            <name>Fodi</name>
        </author>
        <link href="https://advancedconstruct.net/keyboard-mastery/"/>
        <id>https://advancedconstruct.net/keyboard-mastery/</id>
        <media:content url="https://advancedconstruct.net/media/posts/12/mouse-slow.png" medium="image" />
            <category term="Productivity"/>

        <updated>2025-08-13T20:10:00+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://advancedconstruct.net/media/posts/12/mouse-slow.png" alt="Illustration: a cartoon creature that is a snail with the head of a mouse" />
                    <p class="msg msg--highlight ">Switching between the mouse and keyboard can slow you down when you're working in event sheets. But keyboard shortcuts save the day!</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://advancedconstruct.net/media/posts/12/mouse-slow.png" class="type:primaryImage" alt="Illustration: a cartoon creature that is a snail with the head of a mouse" /></p>
                <p class="msg msg--highlight ">Switching between the mouse and keyboard can slow you down when you're working in event sheets. But keyboard shortcuts save the day!</p>

<p>One of the best ways to increase your productivity in any software is to learn keyboard navigation and shortcuts. Construct has very good "keyboard coverage", especially in event sheets.</p>
<p>I find that switching between keyboard and mouse slows me down and doesn't help with my flow either, so I re-read the list of keyboard shortcuts in the official docs from time to time and try incorporating more of them in my workflow.</p>
<p>You can <a href="https://www.construct.net/en/make-games/manuals/construct-3/interface/keyboard-shortcuts">check out the list of Construct's keyboard shortcuts here</a>, and you might want to bookmark it too while you're there. I highly recommend starting with the shortcuts for the event sheet view, but if you spend a lot of time in the animation editor, those shortcuts come super handy as well.</p>
<p>Moving the cursor (or selection) via keyboard in event sheets might be a bit awkward at first, but I think it's worth the effort to learn it.</p>
<p>More seasoned developers probably know most cursor navigation shortcuts too, but just in case, here's a little refresher. (Note that these are for Windows, they probably work on Linux, possibly on macOS with some modifications.)</p>
<ul>
<li><em>Home</em> / <em>End</em> moves the cursor to the start or end of the line</li>
<li><em>Ctrl</em> + <em>Home</em> / <em>End</em> to move to the start or end of the document</li>
<li><em>Page up</em> / <em>Page down</em> does what it says on the tin :)</li>
<li><em>Ctrl</em> + <em>Left</em> / <em>Right</em> arrow keys move the cursor by one word. What constitutes a word might vary based on the app or your OS; spaces and special characters are word delimiters most of the time with some exceptions (eg. underscore usually is not, hyphen-minus-dash depends).</li>
</ul>
<p>All of the above can be combined with <em>Shift</em> to select text.</p>
<p>Since Construct is running in a browser, it's worth learning some of those shortcuts (these might depend on your browser or OS as well), especially:</p>
<ul>
<li><em>Ctrl</em> + <em>R</em> to reload; add Shift to force your browser to ignore the local cache</li>
<li><em>Ctrl</em> + <em>W</em> to close a tab (including Construct, careful :), add <em>Shift</em> to close all tabs in the current window</li>
<li><em>Ctrl</em> + <em>Shift</em> + <em>I</em> to open developer tools</li>
</ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Backing up Construct projects</title>
        <author>
            <name>Fodi</name>
        </author>
        <link href="https://advancedconstruct.net/backing-up-construct-projects/"/>
        <id>https://advancedconstruct.net/backing-up-construct-projects/</id>
        <media:content url="https://advancedconstruct.net/media/posts/11/backup.png" medium="image" />
            <category term="Basics"/>

        <updated>2025-08-13T19:56:00+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://advancedconstruct.net/media/posts/11/backup.png" alt="Illustration: a big floppy disk emerging from behind mountains with sun rays behind it" />
                    <p class="msg msg--highlight ">Backups are crucial if you don't want to have a bad time. And don't just use one! Here's how I do it.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://advancedconstruct.net/media/posts/11/backup.png" class="type:primaryImage" alt="Illustration: a big floppy disk emerging from behind mountains with sun rays behind it" /></p>
                <p class="msg msg--highlight ">Backups are crucial if you don't want to have a bad time. And don't just use one! Here's how I do it.</p>

<p>Data loss sucks and will happen to everyone, so back up your stuff and not only in one place. Consider hot &amp; cold backups, automatic and manual ones, and periodically verifying backups, especially for important stuff.</p>
<p>My method is to put all of my <strong>Construct projects inside Dropbox</strong>, and since I'm almost always online that's already a form of automatic backup, since Dropbox detects when I save a project, immediately pushes the change to the server (and keeps a few versions back as well). I use c3p project files (because I like to put emojis in my event sheet names - don't judge :D - and those don't sync at time of writing). A disadvantage is that saving is a bit slower due to the extra zipping step, but my projects are usually not too big, so that's not a big issue for me.</p>
<p>Every few hours I <strong>save the project with a new file name</strong> (eg MyProject-v01, then MyProject-v02, etc), which also constitutes a form of versioning. If you prefer working with project folders, git is probably the best idea; just don't forget to commit and push to remote (eg. GitHub, GitLab, whatever floats your boat) regularly.</p>
<p>I also use <strong>GitHub for manual backups</strong> by converting my c3p files into git commits with <a href="https://github.com/fodi/c3p2git">this script</a> and pushing them to remote every once in a while (note that I'm only doing hobby stuff). Since I use 3 PCs for work (one of the reasons I went with Dropbox) they also act as offline snapshots; in case something goes terribly wrong with the contents of my Dropbox, I can boot one of the PCs disconnected form the Internet and make a backup of the (hopefully valid) state of my Dropbox.</p>
<p><strong>Construct has an automatic backup feature</strong> and you should use it. You can set it up with a cloud provider or just a local folder. I do the latter one, but the folder is inside my Dropbox too. I can't vouch for other sync providers, but there's a good chance Google Drive, OneDrive, Mega and Syncthing are viable options.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Setting up Construct</title>
        <author>
            <name>Fodi</name>
        </author>
        <link href="https://advancedconstruct.net/setting-up-construct/"/>
        <id>https://advancedconstruct.net/setting-up-construct/</id>
        <media:content url="https://advancedconstruct.net/media/posts/9/setting-up.png" medium="image" />
            <category term="Basics"/>

        <updated>2025-08-13T19:53:00+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://advancedconstruct.net/media/posts/9/setting-up.png" alt="Illustration: a sealed cardboard box with a low res space invader character printed on it" />
                    <p class="msg msg--highlight ">There's more then one way to install Construct. Are you using the most convenient one?</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://advancedconstruct.net/media/posts/9/setting-up.png" class="type:primaryImage" alt="Illustration: a sealed cardboard box with a low res space invader character printed on it" /></p>
                <p class="msg msg--highlight ">There's more then one way to install Construct. Are you using the most convenient one?</p>

<p>Even though my daily driver is Mozilla Firefox (because I'm an intermediate privacy nut and I don't want to wonder around the Internet without <a href="https://addons.mozilla.org/en-US/firefox/addon/ublock-origin">an uncrippled version of uBlock Origin</a>), I run Construct in <strong>Chromium</strong>. I chose it because:</p>
<ul>
<li>Chromium seems to run games with better performance compared to Firefox. The difference is especially apparent in 3D games, but most of my 2D games also have better frame rates on Chromium based browsers.</li>
<li>I can install Construct as a <a href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps" title="progressive web app" target="_blank" rel="noopener noreferrer">PWA</a> with it, which comes with a launcher icon, more screen space and .c3p file association which is neat. It almost feels like a native app.</li>
<li>Google Chrome and Microsoft Edge are <a href="https://en.wikipedia.org/wiki/Usage_share_of_web_browsers" target="_blank" rel="noopener noreferrer">very popular browsers</a> and are both based on Chromium (as are Opera and Brave). If something is not working in Chromium, there's a good chance it won't work in Chrome, Edge, Opera or Brave either.</li>
<li>Chromium is open source and doesn't push Google crap, Microsoft crap or cryptocurrencies (at the time of writing).</li>
</ul>
<p class="msg msg--info"><strong>Sidenote</strong><br>I use the <a href="https://github.com/Hibbiki/chromium-win64/">Chromium build by Hibbiki</a>, which I installed and keep updated with <a href="https://scoop.sh/">scoop</a>. Other alternatives include the <a href="https://chromium.woolyss.com/">Woolyss build</a> and <a href="https://github.com/ungoogled-software/ungoogled-chromium">Ungoogled Chromium</a>. I personally don't mind the small amount of Google stuff in the build I use, especially because I barely use it for anything other then running Construct.</p>
<p>If you don't have concerns about Google Chrome, Microsoft Edge, Opera or Brave, just use any of them, Construct should run well in all of them.</p>
<p>On Windows 10 and newer you also have the option to install <a href="https://www.microsoft.com/store/productId/9NBZ6CP2P37P" target="_blank" rel="noopener noreferrer">Construct 3 from the Microsoft Store</a>; I'm guessing it's a similar experience to installing the PWA with Microsoft Edge.</p>
<p>When you open the Construct editor for the first time, it immediately starts downloading the necessary files for offline use and will let you know via a notification in the bottom left when it's ready.</p>
<p>If you're planning to<strong> use Construct offline</strong>, make sure you open a project and run a preview, as some browsers might prevent Construct from caching the files needed to run projects. Also don't forget to log in while online before going off the grid.</p>
            ]]>
        </content>
    </entry>
</feed>
