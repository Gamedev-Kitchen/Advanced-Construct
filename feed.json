{
    "version": "https://jsonfeed.org/version/1",
    "title": "Advanced Construct",
    "description": "",
    "home_page_url": "https://ac.gamedev.kitchen",
    "feed_url": "https://ac.gamedev.kitchen/feed.json",
    "user_comment": "",
    "author": {
        "name": "Fodi"
    },
    "items": [
        {
            "id": "https://ac.gamedev.kitchen/using-global-names/",
            "url": "https://ac.gamedev.kitchen/using-global-names/",
            "title": "Using &quot;global names&quot;",
            "summary": "<p class=\"msg msg--highlight \">String literals? Yuck. More typo protection, better autocompletes, enhanced usage lookups? Yes please!</p>\n",
            "content_html": "<p class=\"msg msg--highlight \">String literals? Yuck. More typo protection, better autocompletes, enhanced usage lookups? Yes please!</p>\n\n<p>OG Construct developer <a href=\"https://bsky.app/profile/salmanshh.bsky.social\">Salman Shurie</a> referred to the engine's event system as \"super intellisense\" a couple of times - turns out the phrase was coined by <a href=\"https://bsky.app/profile/wtfmig.bsky.social\">@wtfmig</a>. Nevertheless, I think it's on point.</p>\n<p>When you're using the event system (and no JS/TS code), you can't mistype names of variables, constants, behaviours, objects, families or functions, because the editor simply won't let you. You can also rename any of these without worrying about breaking code, Construct automatically updates all references to reflect the name change (again, as long as they are not mentioned in JS/TS code). If you're using the paid version, the editor can also find all usages of variables, constants, objects and family members. It's an amazing tool and I use it countless times during development.</p>\n<p>There are some things you can still mistype, since they are not structured as identifiers, but strings. Layer names, animation names, effect names, various tags (for tweens, timers, sounds, et cetera) can be entered as string literals. Construct tries to suggest them, but you can still make a typo and you don't get usage finding. And if you decide to rename a layer, animation, effect or any sort of tag, you'll have to manually search for it and change it manually by hand which is tedious and error prone.</p>\n<p>My solution is to create global constants (which are identifiers) and use them instead of string literals. This way you get typo protection, usage lookups and renaming things is a lot easier once you resist the urge to use string literals in those cases. Granted, there's an extra step (creating a global constant), but I think it's worth the extra features.</p>\n<p>I put the \"global name\" constants in an event sheet called <code>vNames</code>. Since it only contains variables, it's automatically \"included\" in all events sheets, so you don't have to worry about importing it. (By the way the same goes for functions and custom actions too; only sheets containing events have to be included to run.)</p>\n<p>You can apply a naming convention on the global \"name\" constants to signify their \"kind\", eg:</p>\n<ul>\n<li><code>LAYER_Main = \"Main\"</code> (value matches the layer name)</li>\n<li><code>TIMER_Invincibility = \"Invincibility\"</code> (timer tag)</li>\n<li><code>TWEEN_FadeIn = \"FadeIn\"</code> (tween tag)</li>\n<li><code>EFFECT_Brightness = \"Brightness\"</code> (value matches an effect name)</li>\n<li><code>ANIM_Idle = \"Idle\"</code> (value matches an animation name)</li>\n</ul>\n<p>...or you can even add the names of the related family or object type, so there's no reuse between different types:</p>\n<ul>\n<li><code>TIMER_Player_Invincibility = \"Player_Invincibility\"</code></li>\n<li><code>TWEEN_Enemy_Opacity_FadeIn = \"Enemy_Opacity_FadeIn\"</code> (also includes the \"type\" of tween - in this case, opacity)</li>\n<li><code>EFFECT_Item_Brightness = \"Brightness\"</code></li>\n<li><code>ANIM_Enemy_Idle = \"Idle\"</code></li>\n<li><code>ANIM_Player_Idle = \"Idle\"</code></li>\n</ul>\n<p>Lately I've been doing the latter which has two additional benefits:</p>\n<ul>\n<li>Less confusion when finding references, since every name is specific to an object type or a family</li>\n<li>Less typing / better autocompletion: eg. I can type ANIM_ to get a list of all animation names, continuing typing the object/family name filters the list even further so it's easy to choose one with the arrow keys</li>\n<li>Tidier vNames sheet: alphabetically sorting global names means they are grouped by type and object / family.</li>\n</ul>",
            "image": "https://ac.gamedev.kitchen/media/posts/14/global-names-2.png",
            "author": {
                "name": "Fodi"
            },
            "tags": [
                   "Organization"
            ],
            "date_published": "2025-08-13T21:56:00+02:00",
            "date_modified": "2025-08-19T18:00:24+02:00"
        },
        {
            "id": "https://ac.gamedev.kitchen/finding-things-in-construct/",
            "url": "https://ac.gamedev.kitchen/finding-things-in-construct/",
            "title": "Finding things in Construct",
            "summary": "<p class=\"msg msg--highlight \">Let's take a look at the tools in Construct that let you find stuff.</p>\n",
            "content_html": "<p class=\"msg msg--highlight \">Let's take a look at the tools in Construct that let you find stuff.</p>\n\n<p>Like in most development environments you can <strong>perform a text search</strong> by pressing <em>Ctrl</em> + <em>F</em>. Construct allows you to specify the scope of your search, toggle case sensitivity and you can even perform a second search to further filter down search results, which is especially handy when you have a lot of them. You can also <strong>remove results</strong> by selecting them and pressing <em>Delete</em> (re-running the search will bring them back).</p>\n<p>If you're editing a code block or a text file, <em>Ctrl</em> + <em>F</em> brings up a different toolbar that allows you to <strong>find (and even replace) text</strong>. The toolbar might look familiar if you're a VSCode user, since both are powered by the open source Monaco code editor which replaced the old CodeMirror 5 based one in Construct 3 r432. It also has nifty features like renaming identifiers by pressing <em>F2</em> and a bunch of other which you can find in the Command palette. Just note that the scope is always the current code block or tab.</p>\n<p>As your project grows, you might end up scrolling a lot up and down the project bar to <strong>find event sheets, objects, files</strong>, et cetera; luckily there's a search field you can focus by pressing <em>Ctrl</em> + <em>Shift</em> + <em>F</em> and just start typing to find matches.</p>\n<p>Since Construct is running in the browser you can still use the generic find tool, which can be especially useful for <strong>highlighting text on your screen</strong>. Press <em>Ctrl</em> + <em>G</em> to bring it up (since <em>Ctrl</em> + <em>F</em> is overridden to use Construct's own find feature).</p>\n<p>A super useful feature (unfortunately missing from the free version) is that you can right click any object, family, function, custom action or variable and select \"<strong>find all references</strong>\". In all cases, Construct will compile a list of each \"mention\" in the event sheets. If you selected an object instance, object type or family, you'll also see the number of instances per layout. If you use the \"Create object (by name)\" system action anywhere, object &amp; family reference lists will also include those actions as well just to be on the safe side; you can hide those results by unchecking \"Show ambiguous\".</p>\n<p>If you opt in to use <strong>\"global names\"</strong> instead of string literals to reference names of animations, layers, effects, various tags and such in your event sheets, you'll also be able to find all mentions of those using the \"find all references\" feature. Not to mention the added bonus of typo protection and easy renaming. <a href=\"#non-existing-post-with-id-7\">Read more about \"global names\" here!</a></p>",
            "image": "https://ac.gamedev.kitchen/media/posts/13/finding-things.png",
            "author": {
                "name": "Fodi"
            },
            "tags": [
                   "Productivity"
            ],
            "date_published": "2025-08-13T20:38:00+02:00",
            "date_modified": "2025-08-19T23:35:52+02:00"
        },
        {
            "id": "https://ac.gamedev.kitchen/keyboard-mastery/",
            "url": "https://ac.gamedev.kitchen/keyboard-mastery/",
            "title": "Keyboard mastery",
            "summary": "<p class=\"msg msg--highlight \">Switching between the mouse and keyboard can slow you down when you're working in event sheets. But keyboard shortcuts save the day!</p>\n",
            "content_html": "<p class=\"msg msg--highlight \">Switching between the mouse and keyboard can slow you down when you're working in event sheets. But keyboard shortcuts save the day!</p>\n\n<p>One of the best ways to increase your productivity in any software is to learn keyboard navigation and shortcuts. Construct has a very good \"keyboard coverage\", especially in event sheets.</p>\n<p>I find that switching between keyboard and mouse slows me down and doesn't help with my flow either, so I re-read the list of keyboard shortcuts in the official docs from time to time and try incorporating more of them in my workflow.</p>\n<p>You can <a href=\"https://www.construct.net/en/make-games/manuals/construct-3/interface/keyboard-shortcuts\">check out the list of Construct's keyboard shortcuts here</a>, and you might want to bookmark it too while you're there. I highly recommend starting with the shortcuts for the event sheet view, but if you spend a lot of time in the animation editor, those shortcuts come super handy as well.</p>\n<p>Moving the cursor (or selection) via keyboard in event sheets might be a bit awkward at first, but I think it's worth the effort to learn it.</p>\n<p>More seasoned developers probably know most cursor navigation shortcuts too, but just in case, here's a little refresher. (Note that these are for Windows, they probably work on Linux, possibly on macOS with some modifications.)</p>\n<ul>\n<li><em>Home</em> / <em>End</em> moves the cursor to the start or end of the line</li>\n<li><em>Ctrl</em> + <em>Home</em> / <em>End</em> to move to the start or end of the document</li>\n<li><em>Page up</em> / <em>Page down</em> does what it says on the tin :)</li>\n<li><em>Ctrl</em> + <em>Left</em> / <em>Right</em> arrow keys move the cursor by one word. What constitutes a word might vary based on the app or your OS; spaces and special characters are word delimiters most of the time with some exceptions (eg. underscore usually is not, hyphen-minus-dash depends).</li>\n</ul>\n<p>All of the above can be combined with <em>Shift</em> to select text.</p>\n<p>Since Construct is running in a browser, it's worth learning some of those shortcuts (these might depend on your browser or OS as well), especially:</p>\n<ul>\n<li><em>Ctrl</em> + <em>R</em> to reload; add Shift to force your browser to ignore the local cache</li>\n<li><em>Ctrl</em> + <em>W</em> to close a tab (including Construct, careful :), add <em>Shift</em> to close all tabs in the current window</li>\n<li><em>Ctrl</em> + <em>Shift</em> + <em>I</em> to open developer tools</li>\n</ul>",
            "image": "https://ac.gamedev.kitchen/media/posts/12/mouse-slow.png",
            "author": {
                "name": "Fodi"
            },
            "tags": [
                   "Productivity"
            ],
            "date_published": "2025-08-13T20:10:00+02:00",
            "date_modified": "2025-08-19T17:59:09+02:00"
        },
        {
            "id": "https://ac.gamedev.kitchen/backing-up-construct-projects/",
            "url": "https://ac.gamedev.kitchen/backing-up-construct-projects/",
            "title": "Backing up Construct projects",
            "summary": "<p class=\"msg msg--highlight \">Backups are crucial if you don't want to have a bad time. And don't just use one! Here's how I do it.</p>\n",
            "content_html": "<p class=\"msg msg--highlight \">Backups are crucial if you don't want to have a bad time. And don't just use one! Here's how I do it.</p>\n\n<p>Data loss sucks and will happen to everyone, so back up your stuff and not only in one place. Consider hot &amp; cold backups, automatic and manual ones, and periodically verifying backups, especially for important stuff.</p>\n<p>My method is to put all of my <strong>Construct projects inside Dropbox</strong>, and since I'm almost always online that's already a form of automatic backup, since Dropbox detects when I save a project, immediately pushes the change to the server (and keeps a few versions back as well). I use c3p project files (because I like to put emojis in my event sheet names - don't judge :D - and those don't sync at time of writing). A disadvantage is that saving is a bit slower due to the extra zipping step, but my projects are usually not too big, so that's not a big issue for me.</p>\n<p>Every few hours I <strong>save the project with a new file name</strong> (eg MyProject-v01, then MyProject-v02, etc), which also constitutes a form of versioning. If you prefer working with project folders, git is probably the best idea; just don't forget to commit and push to remote (eg. GitHub, GitLab, whatever floats your boat) regularly.</p>\n<p>I also use <strong>GitHub for manual backups</strong> by converting my c3p files into git commits with <a href=\"https://github.com/fodi/c3p2git\">this script</a> and pushing them to remote every once in a while (note that I'm only doing hobby stuff). Since I use 3 PCs for work (one of the reasons I went with Dropbox) they also act as offline snapshots; in case something goes terribly wrong with the contents of my Dropbox, I can boot one of the PCs disconnected form the Internet and make a backup of the (hopefully valid) state of my Dropbox.</p>\n<p><strong>Construct has an automatic backup feature</strong> and you should use it. You can set it up with a cloud provider or just a local folder. I do the latter one, but the folder is inside my Dropbox too. I can't vouch for other sync providers, but there's a good chance Google Drive, OneDrive, Mega and Syncthing are viable options.</p>",
            "image": "https://ac.gamedev.kitchen/media/posts/11/backup.png",
            "author": {
                "name": "Fodi"
            },
            "tags": [
                   "Basics"
            ],
            "date_published": "2025-08-13T19:56:00+02:00",
            "date_modified": "2025-08-19T23:35:09+02:00"
        },
        {
            "id": "https://ac.gamedev.kitchen/setting-up-construct/",
            "url": "https://ac.gamedev.kitchen/setting-up-construct/",
            "title": "Setting up Construct",
            "summary": "<p class=\"msg msg--highlight \">There's more then one way to install Construct. Are you using the most convenient one?</p>\n",
            "content_html": "<p class=\"msg msg--highlight \">There's more then one way to install Construct. Are you using the most convenient one?</p>\n\n<p>Even though my daily driver is Mozilla Firefox (because I'm an intermediate privacy nut and I don't want to wonder around the Internet without <a href=\"https://addons.mozilla.org/en-US/firefox/addon/ublock-origin\">an uncrippled version of uBlock Origin</a>), I run Construct in <strong>Chromium</strong>. I chose it because:</p>\n<ul>\n<li>Chromium seems to run games with better performance compared to Firefox. The difference is especially apparent in 3D games, but most of my 2D games also have better frame rates on Chromium based browsers.</li>\n<li>I can install Construct as a <a href=\"https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps\" title=\"progressive web app\" target=\"_blank\" rel=\"noopener noreferrer\">PWA</a> with it, which comes with a launcher icon, more screen space and .c3p file association which is neat. It almost feels like a native app.</li>\n<li>Google Chrome and Microsoft Edge are <a href=\"https://en.wikipedia.org/wiki/Usage_share_of_web_browsers\" target=\"_blank\" rel=\"noopener noreferrer\">very popular browsers</a> and are both based on Chromium (as are Opera and Brave). If something is not working in Chromium, it probably won't work in Chrome, Edge, Opera or Brave either.</li>\n<li>Chromium is open source and doesn't push Google crap, Microsoft crap or cryptocurrencies. At the time of writing :)</li>\n</ul>\n<p class=\"msg msg--info\"><strong>Side note</strong><br>I use the <a href=\"https://github.com/Hibbiki/chromium-win64/\">Chromium build by Hibbiki</a>, which I installed and keep updated with <a href=\"https://scoop.sh/\">scoop</a>. Other alternatives include the <a href=\"https://chromium.woolyss.com/\">Woolyss build</a> and <a href=\"https://github.com/ungoogled-software/ungoogled-chromium\">Ungoogled Chromium</a>. I personally don't mind the small amount of Google stuff in the build I use, especially because I barely use it for anything other then running Construct.</p>\n<p>If you don't have concerns about Google Chrome, Microsoft Edge, Opera or Brave, just use any of them, Construct should run well in all of them.</p>\n<p>On Windows 10 and newer you also have the option to install Construct 3 from the <strong>Microsoft Store</strong>; I'm guessing it's a similar experience to installing the PWA with Microsoft Edge.</p>\n<p>When you open the Construct editor for the first time, it immediately starts downloading the necessary files for offline use and will let you know via a notification in the bottom left when it's ready.</p>\n<p>If you're planning to<strong> use Construct offline</strong>, make sure you open a project and run a preview, as some browsers might prevent Construct from caching the files needed to run projects. Also don't forget to log in while online before going off the grid.</p>",
            "image": "https://ac.gamedev.kitchen/media/posts/9/setting-up.png",
            "author": {
                "name": "Fodi"
            },
            "tags": [
                   "Basics"
            ],
            "date_published": "2025-08-13T19:53:00+02:00",
            "date_modified": "2025-08-19T17:56:27+02:00"
        },
        {
            "id": "https://ac.gamedev.kitchen/introduction/",
            "url": "https://ac.gamedev.kitchen/introduction/",
            "title": "Introduction",
            "summary": "<p>Hi there! Welcome to <strong>Advanced Construct</strong>, an attempt to share knowledge I gathered since Construct 3 and game development became my hobby in 2020.</p>\n",
            "content_html": "<p>Hi there! Welcome to <strong>Advanced Construct</strong>, an attempt to share knowledge I gathered since Construct 3 and game development became my hobby in 2020.</p>\n\n<p>I'm <a href=\"https://fodi.be\" target=\"_blank\" rel=\"noopener noreferrer\">Fodi</a>, a millennial web developer from Hungary. My plan is to continuosly update this site with articles, and if there's traction, videos as well. Some might age like milk, some might hold up better. Instead of procrastinating or spending too much time with editing, I'm just going to post things.</p>\n<p>I'll try to cover various Construct 3 related topics, more specifically:</p>\n<ul>\n<li><a href=\"https://ac.gamedev.kitchen/tags/basics/\">Basics</a> to improve your developer experience (like setting up the Construct Editor, project backups, et cetera).</li>\n<li>Ways to enhance your <a href=\"https://ac.gamedev.kitchen/tags/productivity/\">productivity</a> and development speed in Construct.</li>\n<li>Project <a href=\"https://ac.gamedev.kitchen/tags/organization/\">organisation</a> patterns to keep things relatively clean and easier to build upon.</li>\n</ul>\n<p>If you have questions or feedback, feel free to find me in the <a href=\"https://discord.gg/g4g3VNsynC\" target=\"_blank\" rel=\"noopener noreferrer\">Construct Community Discord</a> and send me a DM.</p>",
            "image": "https://ac.gamedev.kitchen/media/posts/1/intro.png",
            "author": {
                "name": "Fodi"
            },
            "tags": [
            ],
            "date_published": "2025-08-13T19:08:52+02:00",
            "date_modified": "2025-08-19T15:42:40+02:00"
        }
    ]
}
